# ============================================================
# schemas.py ‚Äî Modelos Pydantic (contratos de entrada/sa√≠da)
# Comentado em portugu√™s, em uma √∫nica p√°gina.
# ============================================================

from pydantic import BaseModel, Field
from typing import Optional, List
from datetime import datetime
from .roles import Role  # Enum de pap√©is (EMPLOYEE, MANAGER, SECURITY_ADMIN, etc.)

# ------------------------------------------------------------
# üë§ USERS ‚Äî cria√ß√£o, atualiza√ß√£o e respostas de usu√°rio
# ------------------------------------------------------------

class UserCreate(BaseModel):
    # Payload para criar usu√°rio novo (usado em POST /auth/register)
    username: str = Field(min_length=3, max_length=50)      # login (validado por tamanho)
    password: str = Field(min_length=6, max_length=128)     # senha em texto (hash ser√° feito no backend)
    role: Role                                              # papel (enum definido em roles.py)

class UserUpdate(BaseModel):
    # Payload para atualizar usu√°rio (parcial) ‚Äî usado em PUT /users/{id}
    username: Optional[str] = Field(default=None, min_length=3, max_length=50)
    password: Optional[str] = Field(default=None, min_length=6, max_length=128)
    role: Optional[Role] = None                             # pode trocar o papel

class UserOut(BaseModel):
    # Modelo de sa√≠da (nunca inclui senha) ‚Äî usado em responses
    id: int
    username: str
    role: Role

    class Config:
        from_attributes = True  # permite criar a partir de objetos ORM (SQLAlchemy)

class UserListOut(BaseModel):
    # Envelope de pagina√ß√£o para listagem de usu√°rios ‚Äî usado em GET /users
    total: int                   # total de registros encontrados
    page: int                    # p√°gina atual
    size: int                    # tamanho da p√°gina
    items: List[UserOut]         # lista de usu√°rios (cada item √© UserOut)

# ------------------------------------------------------------
# üîê AUTH ‚Äî login e token
# ------------------------------------------------------------

class Token(BaseModel):
    # Resposta do login ‚Äî usado em POST /auth/login
    access_token: str            # JWT emitido pelo backend
    token_type: str = "bearer"   # tipo padr√£o para Authorization: Bearer <token>

class LoginRequest(BaseModel):
    # Payload do login ‚Äî usado em POST /auth/login
    username: str
    password: str

# ------------------------------------------------------------
# üìú AREAS / LOGS ‚Äî leitura de logs de acesso
# ------------------------------------------------------------

class AccessLogOut(BaseModel):
    # Modelo de sa√≠da para um log de acesso ‚Äî usado em GET /logs e POST /areas/{area}/enter
    id: int                      # id do log
    user_id: int                 # id do usu√°rio que tentou acessar
    area: str                    # nome da √°rea
    timestamp: datetime          # quando ocorreu (UTC)
    allowed: bool                # se o acesso foi permitido
    reason: Optional[str]        # motivo da negativa (quando allowed=False), opcional

    class Config:
        from_attributes = True   # compat√≠vel com objetos ORM

# ------------------------------------------------------------
# üì¶ RESOURCES ‚Äî CRUD de recursos
# ------------------------------------------------------------

class ResourceBase(BaseModel):
    # Campos comuns a cria√ß√£o/atualiza√ß√£o/retorno de recursos
    name: str = Field(min_length=2, max_length=120)         # nome do recurso
    category: str = Field(min_length=2, max_length=60)      # categoria (ex.: Equipamentos)
    quantity: int = Field(ge=0)                             # quantidade (n√£o negativa)
    location: Optional[str] = Field(default=None, max_length=120)   # localiza√ß√£o opcional
    description: Optional[str] = Field(default=None, max_length=500) # descri√ß√£o opcional

class ResourceCreate(ResourceBase):
    # Payload para criar recurso (mesmos campos de ResourceBase)
    pass

class ResourceUpdate(BaseModel):
    # Payload para atualizar recurso (parcial) ‚Äî usado em PUT /resources/{id}
    name: Optional[str] = Field(default=None, min_length=2, max_length=120)
    category: Optional[str] = Field(default=None, min_length=2, max_length=60)
    quantity: Optional[int] = Field(default=None, ge=0)
    location: Optional[str] = Field(default=None, max_length=120)
    description: Optional[str] = Field(default=None, max_length=500)

class ResourceOut(ResourceBase):
    # Modelo de sa√≠da de um recurso ‚Äî herda valida√ß√µes de ResourceBase
    id: int  # identificador do recurso

    class Config:
        from_attributes = True   # permite resposta direta a partir do ORM

class ResourceListOut(BaseModel):
    # Envelope de pagina√ß√£o para listagem de recursos ‚Äî usado em GET /resources
    total: int                   # total de recursos encontrados
    page: int                    # p√°gina atual
    size: int                    # tamanho da p√°gina
    items: List[ResourceOut]     # lista de recursos (cada item √© ResourceOut)